import { c as create_ssr_component } from "../../chunks/ssr.js";
import sanityClient from "@sanity/client";
sanityClient({
  projectId: "scr4fyl4",
  // Your project ID
  dataset: "production",
  // Your dataset
  apiVersion: "2023-09-01",
  // Use the current API version
  useCdn: true
  // Use CDN for faster response times
});
const css = {
  code: ".input-field.svelte-1q05030{border:1px solid #e2e8f0;border-radius:4px;padding:0.5rem;width:100%;margin-top:0.5rem}.modal.svelte-1q05030{position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0, 0, 0, 0.5);display:flex;justify-content:center;align-items:center;z-index:10}.modal-content.svelte-1q05030{background:white;padding:2rem;border-radius:8px;max-width:400px;width:100%}.modal-header.svelte-1q05030{font-size:1.5rem;font-weight:bold;margin-bottom:1rem}.question-container.svelte-1q05030{margin-bottom:1.5rem;padding:1rem;border:1px solid #e2e8f0;border-radius:8px;background-color:#f7fafc}.question-text.svelte-1q05030{font-weight:bold;margin-bottom:0.5rem}.input-field.svelte-1q05030{border:1px solid #e2e8f0;border-radius:4px;padding:0.5rem;width:100%;margin-top:0.5rem}.modal.svelte-1q05030{position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0, 0, 0, 0.5);display:flex;justify-content:center;align-items:center;z-index:10}.modal-content.svelte-1q05030{background:white;padding:2rem;border-radius:8px;max-width:400px;width:100%}.modal-header.svelte-1q05030{font-size:1.5rem;font-weight:bold;margin-bottom:1rem}.question-container.svelte-1q05030{margin-bottom:1.5rem;padding:1rem;border:1px solid #e2e8f0;border-radius:8px;background-color:#f7fafc}.question-text.svelte-1q05030{font-weight:bold;margin-bottom:0.5rem}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\r\\n    import { client } from '../sanityClient.js';\\r\\n    import { onMount } from 'svelte';\\r\\n    const apiUrl = import.meta.env.VITE_API_URL;\\r\\n\\r\\n    let survey = null;\\r\\n    let responses = {};\\r\\n    let showSignUpModal = false;\\r\\n    let showLoginModal = false;\\r\\n    let isloggedin = false;\\r\\n\\r\\n    let username = '';\\r\\n    let password = '';\\r\\n    let user_id = null;\\r\\n    onMount(async () => {\\r\\n        try {\\r\\n            const response = await fetch('http://localhost:3000/api/questions');\\r\\n            if (response.ok) {\\r\\n                survey = await response.json();\\r\\n                console.log(survey); // Check the structure of the survey data\\r\\n            } else {\\r\\n                console.error('Failed to fetch questions');\\r\\n            }\\r\\n        } catch (error) {\\r\\n            console.error('Error fetching survey data:', error);\\r\\n        }\\r\\n    });\\r\\n\\r\\n\\r\\n    async function handleSubmit() {\\r\\n        try {\\r\\n            const response = await fetch('http://localhost:3000/api/answers', {\\r\\n                method: 'POST',\\r\\n                headers: {\\r\\n                    'Content-Type': 'application/json'\\r\\n                },\\r\\n                body: JSON.stringify({ responses, user_id }) // Send user ID along with responses\\r\\n            });\\r\\n\\r\\n            const result = await response.json();\\r\\n            if (response.ok) {\\r\\n                alert('Survey submitted successfully!');\\r\\n            } else {\\r\\n                console.error('Survey submission failed:', result.error);\\r\\n            }\\r\\n        } catch (error) {\\r\\n            console.error('Error submitting survey:', error);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function toggleSignUpModal() {\\r\\n        showSignUpModal = !showSignUpModal;\\r\\n    }\\r\\n\\r\\n    function toggleLoginModal() {\\r\\n        showLoginModal = !showLoginModal;\\r\\n    }\\r\\n\\r\\n    async function handlesignup(event) {\\r\\n        event.preventDefault();\\r\\n        try {\\r\\n            const response = await fetch('http://localhost:3000/api/register', {\\r\\n                method: 'POST',\\r\\n                headers: { 'Content-Type': 'application/json' },\\r\\n                body: JSON.stringify({ username, password })\\r\\n            });\\r\\n            const data = await response.json();\\r\\n\\r\\n            if (response.ok) {\\r\\n                console.log('Registration successful', data);\\r\\n                // Optionally close modal or reset fields\\r\\n            } else {\\r\\n                console.error('Registration Error:', data.error);\\r\\n            }\\r\\n        } catch (error) {\\r\\n            console.error('Registration Error:', error);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    async function handleLogin(event) {\\r\\n        event.preventDefault();\\r\\n\\r\\n        try {\\r\\n            const response = await fetch('http://localhost:3000/api/login', {\\r\\n                method: 'POST',\\r\\n                headers: {\\r\\n                    'Content-Type': 'application/json'\\r\\n                },\\r\\n                body: JSON.stringify({ username, password })\\r\\n            });\\r\\n            const data = await response.json();\\r\\n\\r\\n            if (response.ok) {\\r\\n                console.log('Login successful');\\r\\n                user_id = data.user_id; // Update user_id with the received value\\r\\n\\r\\n                // Close the login modal\\r\\n                isloggedin = true;\\r\\n                showLoginModal = false; // Close the login modal\\r\\n\\r\\n                // Fetch the survey data after logging in\\r\\n                survey = await client.fetch(\`*[_type == \\"survey\\"]{title, questions}\`);\\r\\n\\r\\n                // Show a confirmation message\\r\\n                alert(\\"Login successful!\\");\\r\\n            } else {\\r\\n                console.error('Login Error:', data.error);\\r\\n            }\\r\\n        } catch (error) {\\r\\n            console.error('Login Error:', error);\\r\\n        }\\r\\n    }\\r\\n\\r\\n<\/script>\\r\\n\\r\\n<header class=\\"bg-gray-800 p-4\\">\\r\\n    <nav class=\\"max-w-7xl mx-auto flex justify-between items-center\\">\\r\\n        <div class=\\"text-white text-lg font-bold\\">Survey App</div>\\r\\n        <ul class=\\"flex space-x-6\\">\\r\\n            <li><a href=\\"/frontend/static\\" class=\\"text-gray-300 hover:text-white\\">Home</a></li>\\r\\n            <li><a href=\\"/about\\" class=\\"text-gray-300 hover:text-white\\">About</a></li>\\r\\n            <li><a href=\\"/contact\\" class=\\"text-gray-300 hover:text-white\\">Contact</a></li>\\r\\n        </ul>\\r\\n        <div>\\r\\n            <button class=\\"px-4 py-2 bg-green-500 text-white rounded-md\\" on:click={toggleSignUpModal}>Sign Up</button>\\r\\n            <button class=\\"px-4 py-2 bg-blue-500 text-white rounded-md ml-4\\" on:click={toggleLoginModal}>Login</button>\\r\\n        </div>\\r\\n    </nav>\\r\\n</header>\\r\\n\\r\\n<style>\\r\\n\\r\\n\\r\\n    .input-field,\\r\\n    .textarea-field {\\r\\n        border: 1px solid #e2e8f0;\\r\\n        border-radius: 4px;\\r\\n        padding: 0.5rem;\\r\\n        width: 100%;\\r\\n        margin-top: 0.5rem;\\r\\n    }\\r\\n\\r\\n    .modal {\\r\\n        position: fixed;\\r\\n        top: 0;\\r\\n        left: 0;\\r\\n        width: 100%;\\r\\n        height: 100%;\\r\\n        background: rgba(0, 0, 0, 0.5);\\r\\n        display: flex;\\r\\n        justify-content: center;\\r\\n        align-items: center;\\r\\n        z-index: 10;\\r\\n    }\\r\\n\\r\\n    .modal-content {\\r\\n        background: white;\\r\\n        padding: 2rem;\\r\\n        border-radius: 8px;\\r\\n        max-width: 400px;\\r\\n        width: 100%;\\r\\n    }\\r\\n\\r\\n    .modal-header {\\r\\n        font-size: 1.5rem;\\r\\n        font-weight: bold;\\r\\n        margin-bottom: 1rem;\\r\\n    }\\r\\n\\r\\n    .question-container {\\r\\n        margin-bottom: 1.5rem;\\r\\n        padding: 1rem;\\r\\n        border: 1px solid #e2e8f0;\\r\\n        border-radius: 8px;\\r\\n        background-color: #f7fafc;\\r\\n    }\\r\\n\\r\\n    .question-text {\\r\\n        font-weight: bold;\\r\\n        margin-bottom: 0.5rem;\\r\\n    }\\r\\n    .input-field{ border: 1px solid #e2e8f0; border-radius: 4px; padding: 0.5rem; width: 100%; margin-top: 0.5rem; }\\r\\n    .modal { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center; z-index: 10; }\\r\\n    .modal-content { background: white; padding: 2rem; border-radius: 8px; max-width: 400px; width: 100%; }\\r\\n    .modal-header { font-size: 1.5rem; font-weight: bold; margin-bottom: 1rem; }\\r\\n    .question-container { margin-bottom: 1.5rem; padding: 1rem; border: 1px solid #e2e8f0; border-radius: 8px; background-color: #f7fafc; }\\r\\n    .question-text { font-weight: bold; margin-bottom: 0.5rem; }\\r\\n</style>\\r\\n\\r\\n<!-- Sign Up Modal -->\\r\\n{#if showSignUpModal}\\r\\n    <div class=\\"modal\\">\\r\\n        <div class=\\"modal-content\\">\\r\\n            <div class=\\"modal-header\\">Sign Up</div>\\r\\n            <form on:submit|preventDefault={handlesignup}>\\r\\n                <div>\\r\\n                    <label for=\\"username\\" class=\\"block text-sm font-medium text-gray-700\\">Username</label>\\r\\n                    <input id=\\"username\\" type=\\"text\\" bind:value={username} class=\\"mt-1 block w-full p-2 border border-gray-300 rounded-md\\" required />\\r\\n                </div>\\r\\n\\r\\n                <div class=\\"mt-4\\">\\r\\n                    <label for=\\"password\\" class=\\"block text-sm font-medium text-gray-700\\">Password</label>\\r\\n                    <input id=\\"password\\" type=\\"password\\" bind:value={password} class=\\"mt-1 block w-full p-2 border border-gray-300 rounded-md\\" required />\\r\\n                </div>\\r\\n\\r\\n                <div class=\\"mt-6 flex justify-between\\">\\r\\n                    <button type=\\"button\\" class=\\"px-4 py-2 bg-gray-500 text-white rounded-md\\" on:click={toggleSignUpModal}>Cancel</button>\\r\\n                    <button type=\\"submit\\" class=\\"px-4 py-2 bg-green-500 text-white rounded-md\\">Sign Up</button>\\r\\n                </div>\\r\\n            </form>\\r\\n        </div>\\r\\n    </div>\\r\\n{/if}\\r\\n\\r\\n<!-- Login Modal -->\\r\\n{#if showLoginModal}\\r\\n    <div class=\\"modal\\">\\r\\n        <div class=\\"modal-content\\">\\r\\n            <div class=\\"modal-header\\">Login</div>\\r\\n            <form on:submit|preventDefault={handleLogin}>\\r\\n                <div>\\r\\n                    <label for=\\"username\\" class=\\"block text-sm font-medium text-gray-700\\">Username</label>\\r\\n                    <input id=\\"username\\" type=\\"text\\" bind:value={username} class=\\"mt-1 block w-full p-2 border border-gray-300 rounded-md\\" required />\\r\\n                </div>\\r\\n\\r\\n                <div class=\\"mt-4\\">\\r\\n                    <label for=\\"login-password\\" class=\\"block text-sm font-medium text-gray-700\\">Password</label>\\r\\n                    <input id=\\"login-password\\" type=\\"password\\" bind:value={password} class=\\"mt-1 block w-full p-2 border border-gray-300 rounded-md\\" required />\\r\\n                </div>\\r\\n\\r\\n                <div class=\\"mt-6 flex justify-between\\">\\r\\n                    <button type=\\"button\\" class=\\"px-4 py-2 bg-gray-500 text-white rounded-md\\" on:click={toggleLoginModal}>Cancel</button>\\r\\n                    <button type=\\"submit\\" class=\\"px-4 py-2 bg-blue-500 text-white rounded-md\\">Login</button>\\r\\n                </div>\\r\\n            </form>\\r\\n        </div>\\r\\n    </div>\\r\\n{/if}\\r\\n\\r\\n<!-- Survey Content -->\\r\\n{#if survey}\\r\\n    {#each survey as surveyItem (surveyItem._id)}\\r\\n        <div class=\\"survey-container\\">\\r\\n            <h2>{surveyItem.title}</h2>\\r\\n            {#each surveyItem.questions as question (question._key)}\\r\\n                <div class=\\"question-container\\">\\r\\n                    <div class=\\"question-text\\">\\r\\n                        <span>Question ID: {question.question_id}</span> - {question.text}\\r\\n                    </div>\\r\\n                    {#if question.options && question.options.length > 0}\\r\\n                        <!-- Render options if available -->\\r\\n                        {#each question.options as option}\\r\\n                            <label class=\\"block mt-2\\">\\r\\n                                <input\\r\\n                                  type=\\"radio\\"\\r\\n                                  bind:group={responses[question.question_id]}\\r\\n                                  value={option}\\r\\n                                  class=\\"mr-2\\"\\r\\n                                />\\r\\n                                {option}\\r\\n                            </label>\\r\\n                        {/each}\\r\\n                    {:else}\\r\\n                        <!-- Render a text input for questions without options -->\\r\\n                        <input\\r\\n                          type=\\"text\\"\\r\\n                          bind:value={responses[question.question_id]}\\r\\n                          class=\\"input-field border border-gray-300 rounded-md p-2 w-full mt-2\\"\\r\\n                          placeholder=\\"Your answer here\\"\\r\\n                        />\\r\\n                    {/if}\\r\\n                </div>\\r\\n            {/each}\\r\\n        </div>\\r\\n    {/each}\\r\\n    <button on:click={handleSubmit} class=\\"mt-4 px-4 py-2 bg-green-500 text-white rounded-md\\">\\r\\n        Submit\\r\\n    </button>\\r\\n{/if}\\r\\nhellloos"],"names":[],"mappings":"AAsII,2BACgB,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,MAAM,CACf,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAChB,CAEA,qBAAO,CACH,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC9B,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,EACb,CAEA,6BAAe,CACX,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,KAAK,CAChB,KAAK,CAAE,IACX,CAEA,4BAAc,CACV,SAAS,CAAE,MAAM,CACjB,WAAW,CAAE,IAAI,CACjB,aAAa,CAAE,IACnB,CAEA,kCAAoB,CAChB,aAAa,CAAE,MAAM,CACrB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,GAAG,CAClB,gBAAgB,CAAE,OACtB,CAEA,6BAAe,CACX,WAAW,CAAE,IAAI,CACjB,aAAa,CAAE,MACnB,CACA,2BAAY,CAAE,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAAE,aAAa,CAAE,GAAG,CAAE,OAAO,CAAE,MAAM,CAAE,KAAK,CAAE,IAAI,CAAE,UAAU,CAAE,MAAQ,CAC/G,qBAAO,CAAE,QAAQ,CAAE,KAAK,CAAE,GAAG,CAAE,CAAC,CAAE,IAAI,CAAE,CAAC,CAAE,KAAK,CAAE,IAAI,CAAE,MAAM,CAAE,IAAI,CAAE,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAE,OAAO,CAAE,IAAI,CAAE,eAAe,CAAE,MAAM,CAAE,WAAW,CAAE,MAAM,CAAE,OAAO,CAAE,EAAI,CAChL,6BAAe,CAAE,UAAU,CAAE,KAAK,CAAE,OAAO,CAAE,IAAI,CAAE,aAAa,CAAE,GAAG,CAAE,SAAS,CAAE,KAAK,CAAE,KAAK,CAAE,IAAM,CACtG,4BAAc,CAAE,SAAS,CAAE,MAAM,CAAE,WAAW,CAAE,IAAI,CAAE,aAAa,CAAE,IAAM,CAC3E,kCAAoB,CAAE,aAAa,CAAE,MAAM,CAAE,OAAO,CAAE,IAAI,CAAE,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAAE,aAAa,CAAE,GAAG,CAAE,gBAAgB,CAAE,OAAS,CACtI,6BAAe,CAAE,WAAW,CAAE,IAAI,CAAE,aAAa,CAAE,MAAQ"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css);
  return `<header class="bg-gray-800 p-4"><nav class="max-w-7xl mx-auto flex justify-between items-center"><div class="text-white text-lg font-bold" data-svelte-h="svelte-141afbp">Survey App</div> <ul class="flex space-x-6" data-svelte-h="svelte-14j4dzc"><li><a href="/frontend/static" class="text-gray-300 hover:text-white">Home</a></li> <li><a href="/about" class="text-gray-300 hover:text-white">About</a></li> <li><a href="/contact" class="text-gray-300 hover:text-white">Contact</a></li></ul> <div><button class="px-4 py-2 bg-green-500 text-white rounded-md" data-svelte-h="svelte-ci5xlk">Sign Up</button> <button class="px-4 py-2 bg-blue-500 text-white rounded-md ml-4" data-svelte-h="svelte-1vjkrm3">Login</button></div></nav></header>   ${``}  ${``}  ${``}
hellloos`;
});
export {
  Page as default
};
